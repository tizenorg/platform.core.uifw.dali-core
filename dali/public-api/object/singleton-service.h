#ifndef __DALI_SINGELTON_SERVICE_H__
#define __DALI_SINGELTON_SERVICE_H__

/*
 * Copyright (c) 2014 Samsung Electronics Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// EXTERNAL INCLUDES
#include <typeinfo>
#include <dali/public-api/object/base-handle.h>
#include <dali/public-api/signals/dali-signal.h>

namespace Dali
{

namespace Internal DALI_INTERNAL
{

class SingletonService;

}

/**
 * @brief Allows the registration of a class as a singleton
 *
 * @note This class is created by the Application class and is destroyed when the Application class is destroyed.
 *
 * @see Application
 */
class DALI_IMPORT_API SingletonService : public BaseHandle
{
public:

  //Signal Names
  static const char* const SIGNAL_OBJECT_CREATED;   ///< Created signal name
  static const char* const SIGNAL_OBJECT_DESTROYED; ///< Destroyed signal name

  /**
   * @brief Create an uninitialized handle.
   *
   * This can be initialized by calling SingletonService::Get().
   */
  SingletonService();

  /**
   * @brief Retrieves a handle to the SingletonService.
   *
   * @return A handle to the SingletonService if it is available. This will be an empty handle if
   *         the service is not available.
   */
  static SingletonService Get();

  void Release();

  /**
   * @brief Destructor
   *
   * This is non-virtual since derived Handle types must not contain data or virtual methods.
   */
  ~SingletonService();

  /**
   * @brief Registers the singleton of Dali handle with its type info.
   *
   * The singleton will be kept alive for the lifetime of the service.
   *
   * @note This is not intended for application developers.
   * @param[in] info The type info of the Dali handle generated by the compiler.
   * @param[in] singleton The Dali handle to be registered
   */
  void Register( const std::type_info& info, BaseHandle singleton );

  /**
   * @brief Unregisters all singletons.
   *
   * @note This is not intended for application developers.
   */
  void UnregisterAll();

  /**
   * @brief Gets the singleton for the given type.
   *
   * @note This is not intended for application developers.
   * @param[in] info The type info of the given type.
   * @return the Dali handle if it is registered as a singleton or an uninitialized handle.
   */
  BaseHandle GetSingleton( const std::type_info& info ) const;

  /**
   * Registers the Object into the Object Registry, which notifies
   * about this object creation to its observers using signals. As
   * the signals use a BaseHandle, the object must already have a
   * ref-count > 0, otherwise it will get deleted on signal completion.
   * @pre The object is not already registered.
   * @pre the object is ref counted (held in an intrusive pointer)
   * @param[in] object Pointer to the object.
   */
  void NotifyObjectCreate( Dali::BaseObject* object );

  /**
   * Unregisters the Object from the Object Registry, Which notifies
   * about this object destruction to its observers.
   * @pre The object is already registered.
   * @param[in] object Pointer to the object.
   */
  void NotifyObjectDestroy( Dali::BaseObject* object );

public: // Signals
  /**
   * @brief Object created signal
   */
  typedef Signal<  void (BaseHandle) > ObjectCreatedSignalType;

  /**
   * @brief Object destroyed signal
   */
  typedef Signal<  void (const Dali::RefObject*) > ObjectDestroyedSignalType;

  /**
   * @brief This signal is emitted when an object is created.
   *
   * A callback of the following type may be connected:
   * @code
   *   void YourCallbackName(BaseHandle object);
   * @endcode
   * @pre The Object has been initialized.
   * @return The signal to connect to.
   */
  ObjectCreatedSignalType& ObjectCreatedSignal();

  /**
   * @brief This signal is emitted when an object is destroyed.
   *
   * WARNING: Since this signal is emitted when the object is
   * in the process of being destroyed, the RefObject pointer
   * passed in the signal should not be modified in anyways.
   * And should NOT be used to create an handle. which will
   * affect the life time of this destroyed object and leads to
   * undefined behaviour.
   *
   * The only intended use is for Toolkit controls which want to
   * keep track of objects being created and destroyed for internal
   * bookkeeping.
   *
   * A callback of the following type may be connected:
   * @code
   *   void YourCallbackName(const Dali::RefObject* objectPointer);
   * @endcode
   * @pre The Object has been initialized.
   * @return The signal to connect to.
   */
  ObjectDestroyedSignalType& ObjectDestroyedSignal();

public: // Not intended for application developers

  /**
   * @brief This constructor is used by SingletonService::Get().
   * @param[in] singletonService A pointer to the internal singleton-service object.
   */
  explicit DALI_INTERNAL SingletonService( Internal::SingletonService* singletonService );
};

} // namespace Dali

#endif // __DALI_SINGELTON_SERVICE_H__

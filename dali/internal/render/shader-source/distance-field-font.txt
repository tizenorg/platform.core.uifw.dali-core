<VertexShader>

  attribute mediump vec3  aPosition;
  attribute mediump vec2  aTexCoord;

  uniform   mediump mat4  uMvpMatrix;
  uniform   lowp    vec4  uColor;
  uniform   lowp    vec4  uTextColor;

  varying   mediump vec2  vTexCoord;

#ifdef USE_GRADIENT
  uniform   lowp    vec4  uGradientColor;
  uniform   mediump vec4  uGradientLine;
  uniform   mediump vec2  uInvTextSize;

  varying   lowp    vec4  vColor;
#endif

  void main()
  {
    gl_Position = uMvpMatrix * vec4(aPosition, 1.0);
    vTexCoord = aTexCoord;

#ifdef USE_GRADIENT
    lowp float f = dot( aPosition.xy * uInvTextSize - uGradientLine.xy, uGradientLine.zw );
    vColor = mix(uTextColor, uGradientColor, f);
#endif
  }

</VertexShader>

<FragmentShader>
#extension GL_OES_standard_derivatives : enable

  uniform mediump sampler2D sTexture;
  uniform highp   vec4      sTextureRect;
  uniform lowp    vec4      uColor;
  uniform highp   vec2      uSmoothing;

  varying highp   vec2      vTexCoord;

#ifdef USE_GRADIENT
  varying lowp    vec4      vColor;
#else
  uniform lowp    vec4      uTextColor;
#endif

  void main()
  {
    // sample distance field
    highp vec2 offset = dFdx(vTexCoord) * 0.33333;
    highp float distanceL = texture2D(sTexture, vTexCoord - offset).a;
    highp float distanceR = texture2D(sTexture, vTexCoord + offset).a;

#ifdef USE_GRADIENT
    lowp vec4 color = clamp(vColor, 0., 1.); // gradiant calculation can overflow.
#else
    lowp vec4 color = uTextColor;
#endif

    // adjust sub-pixel color by sampled distance
    highp float distanceC = .5*(distanceL+distanceR);
    highp vec3 attenuation = vec3( distanceL, distanceC, distanceR );
    highp float smoothingWidth = uSmoothing[1] * max(max(abs(dFdx(distanceL)), abs(dFdx(distanceR))),max(abs(dFdy(distanceL)), abs(dFdy(distanceR))));
    highp float smoothing = uSmoothing[0];
    attenuation = smoothstep(smoothing-smoothingWidth, smoothing+smoothingWidth, attenuation );

    // Set the alpha based on the attenuation
    color.a *= length(attenuation);

    // color multiplied by Actor color
    color = uColor * color;

    // apply attenuation
    color.rgb = mix(vec3(1.)-color.rgb, color.rgb, attenuation);

    gl_FragColor = color;
  }

</FragmentShader>

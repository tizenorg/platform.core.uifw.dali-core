<VertexShader>

attribute mediump vec3  aPosition;
attribute mediump vec2  aTexCoord;

uniform   mediump mat4  uModelView;
uniform   mediump mat4  uProjection;
uniform   mediump mat4  uMvpMatrix;
uniform   mediump mat3  uNormalMatrix;
uniform   lowp    vec4  uColor;
uniform   lowp    vec4  uTextColor;

varying   mediump vec2  vTexCoord;

#ifdef USE_GRADIENT
uniform   lowp    vec4  uGradientColor;
uniform   mediump vec4  uGradientLine;
uniform   mediump vec2  uInvTextSize;

varying   lowp    vec4  vColor;
#endif

void main()
{
  gl_Position = uMvpMatrix * vec4(aPosition, 1.0);
  vTexCoord = aTexCoord;

#ifdef USE_GRADIENT
  lowp float f = dot( aPosition.xy * uInvTextSize - uGradientLine.xy, uGradientLine.zw );
  vColor = mix(uTextColor, uGradientColor, f);
#endif
}

</VertexShader>

<FragmentShader>

uniform mediump sampler2D sTexture;
uniform highp   vec4      sTextureRect;
uniform lowp    vec4      uColor;
uniform highp   vec2      uSmoothing;

varying highp vec2      vTexCoord;

#ifdef USE_GRADIENT
varying lowp    vec4      vColor;
#else
uniform lowp    vec4      uTextColor;
#endif

void main()
{
  // sample distance field
  highp float distance = texture2D(sTexture, vTexCoord).a;

#ifdef USE_GRADIENT
  lowp vec4 color = clamp(vColor, 0., 1.); // gradiant calculation can overflow.
#else
  lowp vec4 color = uTextColor;
#endif

  // adjust fragment alpha by sampled distance
  color.a *= smoothstep(uSmoothing[0], uSmoothing[1], distance );

  // final color multiplied by Actor color
  gl_FragColor = uColor * color;
}

</FragmentShader>

<VertexShader>

  attribute mediump vec3  aPosition;
  attribute mediump vec2  aTexCoord;

  uniform   mediump mat4  uMvpMatrix;
  uniform   lowp    vec4  uColor;
  uniform   lowp    vec4  uTextColor;
  uniform   lowp    vec4  uGradientColor;
  uniform   mediump vec4  uGradientLine;
  uniform   mediump vec2  uInvTextSize;

  varying   mediump vec2  vTexCoord;
  varying   lowp    vec4  vColor;

  void main()
  {
    gl_Position = uMvpMatrix * vec4(aPosition, 1.0);
    vTexCoord = aTexCoord;

    lowp float f = dot( aPosition.xy * uInvTextSize - uGradientLine.xy, uGradientLine.zw );

    vColor = mix(uTextColor, uGradientColor, f);
  }

</VertexShader>

<FragmentShader>

#extension GL_OES_standard_derivatives : enable

  uniform mediump sampler2D sTexture;
  uniform lowp    vec4      uColor;
  uniform mediump float     uSmoothing;
  uniform mediump vec2      uOutline;
  uniform lowp    vec4      uOutlineColor;

  varying mediump vec2      vTexCoord;
  varying lowp vec4         vColor;

  void main()
  {
    // sample distance field
    mediump float distance = texture2D(sTexture, vTexCoord).a;

    mediump float smoothWidth = fwidth(distance) * 0.8;

    mediump float outlineWidth = uOutline[1] + smoothWidth;

    // blend fragment color between outline color and text color
    mediump float outlineBlend = smoothstep(uOutline[0] - outlineWidth, uOutline[0] + outlineWidth, distance);
    lowp vec4 clampedColor = clamp( vColor, 0.0, 1.0 );
    lowp vec4 outlineColor = vec4( uOutlineColor.rgb, uOutlineColor.a * clampedColor.a );
    lowp vec4 color = mix(outlineColor, clampedColor, outlineBlend);

    // adjust fragment alpha by sampled distance
    color.a *= smoothstep(uSmoothing - smoothWidth, uSmoothing + smoothWidth, distance);

    // final color multiplied by Actor color
    gl_FragColor = uColor * color;
  }

</FragmentShader>

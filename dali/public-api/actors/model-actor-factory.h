#ifndef __DALI_MODEL_ACTOR_FACTORY_H__
#define __DALI_MODEL_ACTOR_FACTORY_H__

/*
 * Copyright (c) 2014 Samsung Electronics Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// EXTERNAL INCLUDES
#include <cstddef>
#include <string>

// INTERNAL INCLUDES
#include <dali/public-api/animation/alpha-functions.h>



namespace Dali
{

class Actor;
class Animation;
class Model;

/**
 * @brief This factory class is used to generate actors and animations from a model resource.
 */
class DALI_IMPORT_API ModelActorFactory
{
public:

  /**
   * @brief Create an initialized Actor and child actors.
   *
   * This tree of actors is either the entire model
   * (use an empty name), or a specific entity within the model
   * (specify by entity name).
   *
   * These child actors may be accessed by using either Actor::GetChildren()
   * or Actor::FindChildByName()
   *
   * SetSize() (or an equivalent) should be called on this root actor
   * to scale the actor and it's children to fit within the required
   * screen volume. Note that if any of the size coordinates are zero,
   * (including Z), then the model will not display.
   *
   * @pre the model has finished loading
   * @param[in] model A loaded model object
   * @param[in] name of the entity to create.
   * @return A handle to a newly allocated Dali resource.
   */
  static Actor BuildActorTree(Model& model, const std::string& name);

  /**
   * @brief Create an animation on the actor and child actors using the indexed animation map.
   *
   * If the animation map does not exist in the model, then this returns an uninitialised
   * handle. Uses the duration from the model. Note, changing the duration of the animation
   * will not change the duration of the animators. Instead, use the other variant of this method.
   * @param[in] model A model resource handle
   * @param[in] actor An actor tree (generated by BuildActorTree) to animate
   * @param[in] index The index of the animation
   * @return A handle to an animation, or uninitialised.
   */
  static Animation BuildAnimation(Model& model, Actor actor, size_t index);

  /**
   * @brief Create an animation on the actor and child actors using the indexed animation map.
   *
   * If the animation map does not exist in the model, then this returns an uninitialised
   * handle.
   * @param[in] model A model resource handle
   * @param[in] actor An actor tree (generated by BuildActorTree) to animate
   * @param[in] index The index of the animation
   * @param[in] durationSeconds The duration in seconds to run the effect over
   * @return A handle to an animation, or uninitialised.
   */
  static Animation BuildAnimation(Model& model, Actor actor, size_t index, float durationSeconds);

  /**
   * @brief Create an animation on the actor and child actors using the indexed animation map.
   *
   * If the animation map does not exist in the model, then this returns an uninitialised
   * handle.
   * @param[in] model A model resource handle
   * @param[in] actor An actor tree (generated by BuildActorTree) to animate
   * @param[in] index The index of the animation
   * @param[in] alpha The alpha function to apply to the overall progress.
   * @return A handle to an animation, or uninitialised.
   */
  static Animation BuildAnimation(Model& model, Actor actor, size_t index, AlphaFunction alpha);

  /**
   * @brief Create an animation on the actor and child actors using the indexed animation map.
   *
   * If the animation map does not exist in the model, then this returns an uninitialised
   * handle.
   * @param[in] model A model resource handle
   * @param[in] actor An actor tree (generated by BuildActorTree) to animate
   * @param[in] index The index of the animation
   * @param[in] durationSeconds The duration in seconds to run the effect over
   * @param[in] alpha The alpha function to apply to the overall progress.
   * @return A handle to an animation, or uninitialised.
   */
  static Animation BuildAnimation(Model& model, Actor actor, size_t index, AlphaFunction alpha, float durationSeconds);

};

} // namespace Dali


#endif /* __DALI_MODEL_ACTOR_FACTORY_H__ */

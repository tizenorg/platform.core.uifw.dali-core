<VertexShader>

  attribute mediump vec3  aPosition;
  attribute highp vec4  aTexCoord;

  uniform   mediump mat4  uMvpMatrix;
  uniform   lowp    vec4  uColor;
  uniform   lowp    vec4  uTextColor;
  uniform   highp   vec2  uShadow;
  uniform   lowp    vec4  uGradientColor;
  uniform   mediump vec4  uGradientLine;
  uniform   mediump vec2  uInvTextSize;

  varying   highp   vec2  vTexCoord;
  varying   highp   vec2  vShadowCoord;
  varying   lowp    vec4  vColor;

  void main()
  {
    gl_Position = uMvpMatrix * vec4(aPosition, 1.0);
    vTexCoord = aTexCoord.xy;
    vShadowCoord = vTexCoord - (uShadow * aTexCoord.zw);

    lowp float f = dot( aPosition.xy * uInvTextSize - uGradientLine.xy, uGradientLine.zw );
    vColor = mix(uTextColor, uGradientColor, f);
  }

</VertexShader>

<FragmentShader>

#extension GL_OES_standard_derivatives : enable

  uniform mediump sampler2D sTexture;
  uniform lowp    vec4      uColor;
  uniform mediump float     uSmoothing;
  uniform mediump float     uShadowSmoothing;
  uniform lowp    vec4      uShadowColor;

  varying highp   vec2      vTexCoord;
  varying highp   vec2      vShadowCoord;
  varying lowp    vec4      vColor;

  void main()
  {
    // sample distance field
    mediump float distance = texture2D(sTexture, vTexCoord).a;
    mediump float shadow_distance = texture2D(sTexture, vShadowCoord).a;

    mediump float smoothWidth = fwidth(distance) * 0.8;
    mediump float shadow_smoothWidth = fwidth(shadow_distance) * 0.8;

    mediump float inText = smoothstep(uSmoothing - smoothWidth, uSmoothing + smoothWidth, distance);
    mediump float inShadow = smoothstep(uShadowSmoothing - shadow_smoothWidth, uShadowSmoothing + shadow_smoothWidth, shadow_distance);

    lowp vec4 color;

    mediump float oneMinusSrcAlpha = (1.0 - inText) * inShadow;

    lowp vec4 clampedColor = clamp( vColor, 0.0, 1.0 );
    lowp vec4 cText = vec4( clampedColor.rgb, clampedColor.a * inText );
    lowp vec4 cShadow = vec4(uShadowColor.rgb, uShadowColor.a * clampedColor.a * inShadow);

    // completely outside shadow, maybe inside text
    if( inShadow <= 0.0 )
    {
      color = cText;
    }
    // completely outside text, definitely inside shadow
    else if( inText <= 0.0 )
    {
      color = cShadow;
    }
    // inside text and/or shadow border(s)
    else
    {
      color.rgb = mix( cText.rgb, cShadow.rgb, oneMinusSrcAlpha );
      color.a = max(cText.a, cShadow.a);
    }

    // final color multiplied by Actor color
    gl_FragColor = uColor * color;
  }

</FragmentShader>
